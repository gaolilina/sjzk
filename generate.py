import os
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ChuangYi.settings")
import django
from django.db import models
django.setup()

import inspect
import types
import codecs

# user

import main.models.user as users

url_text = """# Auto generated by generate.py
from django.conf.urls import url

from admin.views.user import *

urls = ["""

view_text = """# Auto generated by generate.py
from django import forms
from django.http import HttpResponse
from django.template import loader, Context
from django.views.generic import View

from main.models.user import *
from main.utils.decorators import validate_args

from admin.utils.decorators import require_cookie, fetch_record
"""
view_class_text = """class {{cls_name}}(View):
    @fetch_record({{cls_name}}.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/{{tbl_name}}.html")
        context = Context({'mod': mod})
        return HttpResponse(template.render(context))

    @fetch_record({{cls_name}}.objects, 'mod', 'id')
    @require_cookie
    @validate_args({
        {{args}}
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        template = loader.get_template("user/{{tbl_name}}.html")
        context = Context({'mod': mod, 'msg': '保存成功'})
        return HttpResponse(template.render(context))

class {{cls_name}}Search(View):
    @require_cookie
    @validate_args({
        'username': forms.CharField(required=False, max_length=20),
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, username='', page=0):
        list = []
        if username == '':
            uid = 0
        else:
            uid = User.objects.get(username=username).id
        template = loader.get_template("user/search.html")
        context = Context({'page': page, 'username': username, 'list': list})
        return HttpResponse(template.render(context))
"""

for mod_name, mod_class in inspect.getmembers(users):
    if mod_name in users.__all__:
        template_text = """
{% extends "layout.html" %}
{% load staticfiles %}
{% block content %}
<form role="form" action="{% url 'admin:user:{{tbl_name}}' mod.id %}" method="post">
<table>
    {{content}}
    <tr>
        <td>{{ msg }}</td>
        <td>
            <div class="buttons">
                <input type="submit" value="保存" />
                <input type="reset" value="取消" />
            </div>
        </td>
    </tr>
</table>
</form>
{% endblock %}

{% block topbar %}{% include 'topbar.html' with tb='user_admin' %}{% endblock %}
{% block leftbar %}{% include 'leftbar.html' with tb='user_admin' lb='user' %}{% endblock %}
{% block rightbar %}{% include 'rightbar.html' with tb='user_admin' lb='user' rb='{{tbl_name}}' %}{% endblock %}

{% block css %}
<style>
    form {
        padding: 30px;
    }
    form img {
        width: 100px;
        height: 100px;
    }
    td {
        padding: 5px 8px;
        vertical-align: top;
    }

    input[type=text], input[type=email], input[type=date], textarea {
        border: 2px solid #C5DBAD;
    }

    input[type=radio] {
        margin-right: 5px;
    }

    input[type=radio] ~ input {
        margin-left: 15px;
    }

    .buttons {
        float: right;
    }

    input[type=submit], input[type=reset] {
        border: 0 none;
        border-radius: 3px;
        padding: 2px 5px;
        background: #85A365;
        color: white;
        margin-left: 10px;
        margin-top: 10px;
    }

    input.tiny {
        width: 60px;
    }
</style>
{% endblock %}
"""
        template_contet_text = """<tr><td>{{text}}：</td><td><input name="{{name}}" type="{{type}}" value="{{ mod.{{name}} }}" /></td></tr>"""

        tbl_name = mod_class._meta.db_table
        
        url_text += "url(r'^" + tbl_name + "/$', " + mod_name  + "Search.as_view(), name='" + tbl_name + "_search'),url(r'^" + tbl_name + "/(?P<id>\w+)$', " + mod_name  + ".as_view(), name='" + tbl_name + "'),"

        args_text = ""
        content_text = ""
        for fld in mod_class._meta.get_fields():
            if isinstance(fld, models.CharField):
                if fld.name == 'password':
                    continue
                args_text += "'" + fld.name + "': forms.CharField(" + ("max_length=" + str(fld.max_length) + "," if fld.max_length > 0 else "") + ("required=False," if (fld.null or fld.default == '') else "") + "),"
                if fld.name == 'gender':
                    content_text += '<tr><td>' + fld.help_text + '：</td><td>{% include "parts/gender.html" %}</td></tr>'
                elif fld.name == 'description':
                    content_text += '<tr><td>' + fld.help_text + '：</td><td><textarea name=' + fld.name + '>{{ mod.' + fld.name + ' }}</textarea></td></tr>'
                else:
                    content_text += template_contet_text.replace('{{text}}', fld.help_text).replace('{{name}}', fld.name).replace('{{type}}', 'text')
            elif isinstance(fld, models.BooleanField):
                args_text += "'" + fld.name + "': forms.BooleanField(required=False),"
                content_text += template_contet_text.replace('{{text}}', fld.help_text).replace('{{name}}', fld.name).replace('{{type}}', 'checkbox')
            elif isinstance(fld, models.DateTimeField):
                args_text += "'" + fld.name + "': forms.DateTimeField(" + ("required=False," if (fld.null or fld.default is not None ) else "") + "),"
                content_text += template_contet_text.replace('{{text}}', fld.help_text).replace('{{name}}', fld.name).replace('{{type}}', 'datetime')
            elif isinstance(fld, models.DateField):
                args_text += "'" + fld.name + "': forms.DateField(" + ("required=False," if (fld.null or fld.default is not None ) else "") + "),"
                content_text += template_contet_text.replace('{{text}}', fld.help_text).replace('{{name}}', fld.name).replace('{{type}}', 'date')
            elif isinstance(fld, models.IntegerField):
                args_text += "'" + fld.name + "': forms.IntegerField(" + ("required=False," if (fld.null or fld.default is not None ) else "") + "),"
                content_text += template_contet_text.replace('{{text}}', fld.help_text).replace('{{name}}', fld.name).replace('{{type}}', 'text')
            elif isinstance(fld, models.ForeignKey):
                content_text += '<tr><td>' + fld.help_text + '：</td><td><a href="{% url "admin:user:' + fld.rel.to._meta.db_table + '" mod.' + fld.name + '.id %}">{{ mod.' + fld.name + '.id }}</a></td></tr>'
        
        view_text += view_class_text.replace('{{cls_name}}', mod_name).replace('{{tbl_name}}', tbl_name).replace('{{args}}', args_text)
        template_file = codecs.open("./admin/templates/user/" + tbl_name + ".html", "w", "utf-8")
        template_file.write(template_text.replace('{{content}}', content_text).replace('{{tbl_name}}', tbl_name))
        template_file.close()


url_text += "]"
url_file = codecs.open("./admin/urls/user.py", "w", "utf-8")
url_file.write(url_text)
url_file.close()

view_file = codecs.open("./admin/views/user.py", "w", "utf-8")
view_file.write(view_text)
view_file.close()