# Auto generated by team.py
from django import forms
from django.http import HttpResponse
from django.template import loader, Context
from django.views.generic import View

from admin.utils.decorators import *
from main.models import Achievement
from main.models.action import TeamAction, TeamActionComment, TeamActionLiker
from main.models.need import TeamNeed
from main.models.task import ExternalTask, InternalTask
from main.models.team import *
from util.decorator.auth import admin_auth
from util.decorator.param import old_validate_args
from util.base.view import BaseView


class ExternalTaskView(BaseView):
    @fetch_record(ExternalTask.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    # 团队需求扩展
    @fetch_record(ExternalTask.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'title': forms.CharField(max_length=20, ), 'content': forms.CharField(required=False, ),
        'expend': forms.IntegerField(required=False, ), 'expend_actual': forms.IntegerField(required=False, ),
        'status': forms.IntegerField(required=False, ), 'deadline': forms.DateField(required=False, ),
        'assign_num': forms.IntegerField(required=False, ), 'submit_num': forms.IntegerField(required=False, ),
        'pay_num': forms.IntegerField(required=False, ), 'pay_time': forms.DateTimeField(required=False, ),
        'finish_time': forms.DateTimeField(required=False, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("external_task", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class ExternalTaskList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = ExternalTask.objects.filter(team_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:external_task', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if ExternalTask == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:external_task_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'external_task', 'user': request.user})
        else:
            context = Context({'rb': 'external_task', 'user': request.user})
        return self.success(data=context)


class InternalTaskView(BaseView):
    @fetch_record(InternalTask.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    # 新增内部需求
    @fetch_record(InternalTask.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'title': forms.CharField(max_length=20, ), 'content': forms.CharField(required=False, ),
        'status': forms.IntegerField(required=False, ), 'deadline': forms.DateField(required=False, ),
        'assign_num': forms.IntegerField(required=False, ), 'submit_num': forms.IntegerField(required=False, ),
        'finish_time': forms.DateTimeField(required=False, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("internal_task", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class InternalTaskList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = InternalTask.objects.filter(team_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:internal_task', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if InternalTask == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:internal_task_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'internal_task', 'user': request.user})
        else:
            context = Context({'rb': 'internal_task', 'user': request.user})
        return self.success(data=context)


class TeamView(BaseView):
    @fetch_record(Team.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(Team.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'name': forms.CharField(max_length=20, ),
        'icon': forms.CharField(max_length=100, required=False, ),
        'description': forms.CharField(max_length=100, required=False, ),
        'url': forms.CharField(max_length=100, ),
        'field1': forms.CharField(max_length=10, required=False, ),
        'field2': forms.CharField(max_length=10, required=False, ),
        'province': forms.CharField(max_length=20, required=False, ),
        'city': forms.CharField(max_length=20, required=False, ),
        'county': forms.CharField(max_length=20, required=False, ),
        'is_recruiting': forms.BooleanField(required=False),
        'is_enabled': forms.BooleanField(required=False),
        'score': forms.IntegerField(required=False, ),
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = Team.objects.filter(team_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if Team == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team', 'user': request.user})
        else:
            context = Context({'rb': 'team', 'user': request.user})
        return self.success(data=context)


class TeamAchievementView(BaseView):
    @fetch_record(Achievement.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    # 团队成就增/改
    @fetch_record(Achievement.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'description': forms.CharField(max_length=100, required=False, ),
        'picture': forms.CharField(max_length=100, required=False, ),
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_achievement", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamAchievementList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = Achievement.objects.filter(team_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:team:team_achievement', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if Achievement == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_achievement_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_achievement', 'user': request.user})
        else:
            context = Context({'rb': 'team_achievement', 'user': request.user})
        return self.success(data=context)


class TeamActionView(BaseView):
    @admin_auth
    @require_role('yz')
    @fetch_record(TeamAction.objects, 'mod', 'id')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    # 动态增/改
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'action': forms.CharField(max_length=20, ), 'time_created': forms.DateTimeField(required=False, ),
        'object_type': forms.CharField(max_length=20, ), 'object_id': forms.IntegerField(required=False, ),
        'related_object_type': forms.CharField(max_length=20, required=False, ),
        'related_object_id': forms.IntegerField(required=False, ),
    })
    @fetch_record(TeamAction.objects, 'mod', 'id')
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_action", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamActionList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamAction.objects.filter(team_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_action', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamAction == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_action_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_action', 'user': request.user})
        else:
            context = Context({'rb': 'team_action', 'user': request.user})
        return self.success(data=context)


class TeamActionCommentView(BaseView):
    @admin_auth
    @require_role('yz')
    @fetch_record(TeamActionComment.objects, 'mod', 'id')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    # 评论增/改
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'content': forms.CharField(max_length=100, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    @fetch_record(TeamActionComment.objects, 'mod', 'id')
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_action_comment", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamActionCommentList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamActionComment.objects.filter(entity_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:team:team_action_comment', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamActionComment == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_action_comment_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_action_comment', 'user': request.user})
        else:
            context = Context({'rb': 'team_action_comment', 'user': request.user})
        return self.success(data=context)
    

class TeamActionLikerView(BaseView):
    @admin_auth
    @require_role('yz')
    @fetch_record(TeamActionLiker.objects, 'mod', 'id')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    # 动态点赞
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_created': forms.DateTimeField(required=False, ),
    })
    @fetch_record(TeamActionLiker.objects, 'mod', 'id')
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_action_liker", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamActionLikerList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamActionLiker.objects.filter(team_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:team:team_action_liker', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamActionLiker == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_action_liker_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_action_liker', 'user': request.user})
        else:
            context = Context({'rb': 'team_action_liker', 'user': request.user})
        return self.success(data=context)


class TeamCommentView(BaseView):
    @fetch_record(TeamComment.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(TeamComment.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'content': forms.CharField(max_length=100, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_comment", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamCommentList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamComment.objects.filter(entity_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_comment', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamComment == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_comment_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_comment', 'user': request.user})
        else:
            context = Context({'rb': 'team_comment', 'user': request.user})
            return self.success(data=context)
        

class TeamFeatureView(BaseView):
    @fetch_record(TeamFeature.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(TeamFeature.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'data': forms.CharField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_feature", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamFeatureList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamFeature.objects.filter(team_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_feature', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamFeature == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_feature_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_feature', 'user': request.user})
        else:
            context = Context({'rb': 'team_feature', 'user': request.user})
        return self.success(data=context)


class TeamFollowerView(BaseView):
    @fetch_record(TeamFollower.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(TeamFollower.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_follower", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamFollowerList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamFollower.objects.filter(team_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_follower', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamFollower == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_follower_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_follower', 'user': request.user})
        else:
            context = Context({'rb': 'team_follower', 'user': request.user})
        return self.success(data=context)


class TeamInvitationView(BaseView):
    @fetch_record(TeamInvitation.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(TeamInvitation.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'description': forms.CharField(max_length=100, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_invitation", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamInvitationList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamInvitation.objects.filter(team_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_invitation', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamInvitation == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_invitation_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_invitation', 'user': request.user})
        else:
            context = Context({'rb': 'team_invitation', 'user': request.user})
        return self.success(data=context)


class TeamLikerView(BaseView):
    @fetch_record(TeamLiker.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(TeamLiker.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_liker", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamLikerList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamLiker.objects.filter(team_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_liker', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamLiker == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_liker_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_liker', 'user': request.user})
        else:
            context = Context({'rb': 'team_liker', 'user': request.user})
        return self.success(data=context)


class TeamMemberView(BaseView):
    @fetch_record(TeamMember.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(TeamMember.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_member", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamMemberList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamMember.objects.filter(team_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_member', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamMember == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_member_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_member', 'user': request.user})
        else:
            context = Context({'rb': 'team_member', 'user': request.user})
        return self.success(data=context)


class TeamMemberRequestView(BaseView):
    @fetch_record(TeamMemberRequest.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(TeamMemberRequest.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'description': forms.CharField(required=False, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_member_request", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamMemberRequestList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamMemberRequest.objects.filter(team_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:team:team_member_request', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamMemberRequest == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_member_request_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_member_request', 'user': request.user})
        else:
            context = Context({'rb': 'team_member_request', 'user': request.user})
        return self.success(data=context)


class TeamNeedView(BaseView):
    @fetch_record(TeamNeed.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(TeamNeed.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'type': forms.IntegerField(required=False, ), 'title': forms.CharField(required=False, ),
        'description': forms.CharField(max_length=200, required=False, ),
        'status': forms.IntegerField(required=False, ), 'number': forms.IntegerField(required=False, ),
        'field': forms.CharField(max_length=20, required=False, ),
        'skill': forms.CharField(max_length=20, required=False, ), 'deadline': forms.DateField(required=False, ),
        'age_min': forms.IntegerField(required=False, ), 'age_max': forms.IntegerField(required=False, ),
        'gender': forms.CharField(max_length=1, required=False, ),
        'degree': forms.CharField(max_length=20, required=False, ),
        'major': forms.CharField(max_length=20, required=False, ), 'time_graduated': forms.DateField(required=False, ),
        'cost': forms.IntegerField(required=False, ), 'cost_unit': forms.CharField(max_length=1, required=False, ),
        'time_started': forms.DateField(required=False, ), 'time_ended': forms.DateField(required=False, ),
        'members': forms.CharField(max_length=100, required=False, ),
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_need", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamNeedList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamNeed.objects.filter(team_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_need', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamNeed == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_need_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_need', 'user': request.user})
        else:
            context = Context({'rb': 'team_need', 'user': request.user})
        return self.success(data=context)


class TeamScoreView(BaseView):
    @fetch_record(TeamScore.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(TeamScore.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'score': forms.IntegerField(required=False, ), 'description': forms.CharField(max_length=100, required=False, ),
        'type': forms.CharField(max_length=10, required=False, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_score_record", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamScoreList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamScore.objects.filter(team_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:team:team_score_record', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamScore == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_score_record_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_score_record', 'user': request.user})
        else:
            context = Context({'rb': 'team_score_record', 'user': request.user})
        return self.success(data=context)


class TeamTagView(BaseView):
    @fetch_record(TeamTag.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(TeamTag.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'name': forms.CharField(max_length=20, ), 'order': forms.IntegerField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_tag", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamTagList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamTag.objects.filter(entity_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_tag', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamTag == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_tag_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_tag', 'user': request.user})
        else:
            context = Context({'rb': 'team_tag', 'user': request.user})
        return self.success(data=context)


class TeamVisitorView(BaseView):
    @fetch_record(TeamVisitor.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(TeamVisitor.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_updated': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_visitor", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class TeamVisitorList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamVisitor.objects.filter(team_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_visitor', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if TeamVisitor == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_visitor_list'
            context = Context({
                'name': name,
                'province': province,
                'city': city,
                'county': county,
                'list': Team.objects.filter(
                    name__contains=name,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'team_visitor', 'user': request.user})
        else:
            context = Context({'rb': 'team_visitor', 'user': request.user})
        return self.success(data=context)
