# Auto generated by forum.py
from django import forms
from django.http import HttpResponse
from django.template import loader, Context

from admin.utils.decorators import *
from main.models.forum import *
from util.decorator.auth import admin_auth
from util.decorator.param import old_validate_args
from util.base.view import BaseView


class ForumBoardView(BaseView):
    @fetch_record(ForumBoard.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(ForumBoard.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'name': forms.CharField(max_length=20, ), 'description': forms.CharField(max_length=100, ),
        'time_created': forms.DateTimeField(required=False, ), 'is_system_board': forms.BooleanField(required=False),
        'is_enabled': forms.BooleanField(required=False),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("forum_board", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class ForumBoardList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if request.GET.get("name") is not None:
            name = request.GET.get("name")
            if ForumBoard == ForumPost:
                list = ForumPost.objects.filter(title__contains=name)
            else:
                list = ForumBoard.objects.filter(name__contains=name)
            context = Context({'name': name, 'list': list, 'user': request.user})
        else:
            context = Context({'user': request.user})
        return self.success(data=context)


class ForumPostView(BaseView):
    @fetch_record(ForumPost.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(ForumPost.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'title': forms.CharField(max_length=20, ), 'content': forms.CharField(max_length=300, ),
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("forum_post", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class ForumPostList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if request.GET.get("name") is not None:
            name = request.GET.get("name")
            if ForumPost == ForumPost:
                list = ForumPost.objects.filter(title__contains=name)
            else:
                list = ForumPost.objects.filter(name__contains=name)
            context = Context({'name': name, 'list': list, 'user': request.user})
        else:
            context = Context({'user': request.user})
        return self.success(data=context)
