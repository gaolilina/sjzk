# Auto generated by competition.py
from django import forms
from django.http import HttpResponse
from django.template import loader, Context
from django.views.generic import View

from admin.utils.decorators import *
from main.models.competition import *
from util.decorator.auth import admin_auth
from util.decorator.param import old_validate_args
from util.base.view import BaseView


class CompetitionCommentView(BaseView):
    @fetch_record(CompetitionComment.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(CompetitionComment.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'content': forms.CharField(max_length=100, ),
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("competition_comment", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class CompetitionCommentList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = CompetitionComment.objects.filter(entity_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:competition:competition_comment', 'user': request.user})

        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            content = request.GET.get("content")
            unit = request.GET.get("unit")
            province = request.GET.get("province")
            city = request.GET.get("city")

            if CompetitionComment == Competition:
                redir = 'admin:competition:competition'
            else:
                redir = 'admin:competition:competition_comment_list'
            context = Context({
                'name': name,
                'content': content,
                'unit': unit,
                'province': province,
                'city': city,
                'list': Competition.objects.filter(
                    name__contains=name,
                    content__contains=content,
                    unit__contains=unit,
                    province__contains=province,
                    city__contains=city), 'redir': redir, 'rb': 'competition_comment', 'user': request.user})
        else:
            context = Context({'rb': 'competition_comment', 'user': request.user})
        return self.success(data=context)


class CompetitionFileView(BaseView):
    @fetch_record(CompetitionFile.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(CompetitionFile.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'status': forms.IntegerField(required=False, ), 'file': forms.CharField(max_length=100, required=False, ),
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("competition_file", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class CompetitionFileList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = CompetitionFile.objects.filter(competition_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:competition:competition_file', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            content = request.GET.get("content")
            unit = request.GET.get("unit")
            province = request.GET.get("province")
            city = request.GET.get("city")

            if CompetitionFile == Competition:
                redir = 'admin:competition:competition'
            else:
                redir = 'admin:competition:competition_file_list'
            context = Context({
                'name': name,
                'content': content,
                'unit': unit,
                'province': province,
                'city': city,
                'list': Competition.objects.filter(
                    name__contains=name,
                    content__contains=content,
                    unit__contains=unit,
                    province__contains=province,
                    city__contains=city), 'redir': redir, 'rb': 'competition_file', 'user': request.user})
        else:
            template = loader.get_template("competition/index.html")
            context = Context({'rb': 'competition_file', 'user': request.user})
        return self.success(data=context)

class CompetitionLikerView(BaseView):
    @fetch_record(CompetitionLiker.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(CompetitionLiker.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("competition_liker", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class CompetitionLikerList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = CompetitionLiker.objects.filter(competition_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:competition:competition_liker', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            content = request.GET.get("content")
            unit = request.GET.get("unit")
            province = request.GET.get("province")
            city = request.GET.get("city")

            if CompetitionLiker == Competition:
                redir = 'admin:competition:competition'
            else:
                redir = 'admin:competition:competition_liker_list'
            context = Context({
                'name': name,
                'content': content,
                'unit': unit,
                'province': province,
                'city': city,
                'list': Competition.objects.filter(
                    name__contains=name,
                    content__contains=content,
                    unit__contains=unit,
                    province__contains=province,
                    city__contains=city), 'redir': redir, 'rb': 'competition_liker', 'user': request.user})
        else:
            context = Context({'rb': 'competition_liker', 'user': request.user})
        return self.success(data=context)

class CompetitionNotificationView(BaseView):
    @fetch_record(CompetitionNotification.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(CompetitionNotification.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'status': forms.IntegerField(required=False, ), 'notification': forms.CharField(max_length=1000, ),
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("competition_notification", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class CompetitionNotificationList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = CompetitionNotification.objects.filter(competition_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:competition:competition_notification',
                               'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            content = request.GET.get("content")
            unit = request.GET.get("unit")
            province = request.GET.get("province")
            city = request.GET.get("city")

            if CompetitionNotification == Competition:
                redir = 'admin:competition:competition'
            else:
                redir = 'admin:competition:competition_notification_list'
            context = Context({
                'name': name,
                'content': content,
                'unit': unit,
                'province': province,
                'city': city,
                'list': Competition.objects.filter(
                    name__contains=name,
                    content__contains=content,
                    unit__contains=unit,
                    province__contains=province,
                    city__contains=city), 'redir': redir, 'rb': 'competition_notification', 'user': request.user})
        else:
            context = Context({'rb': 'competition_notification', 'user': request.user})
        return self.success(data=context)


class CompetitionStageView(BaseView):
    @fetch_record(CompetitionStage.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(CompetitionStage.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'status': forms.IntegerField(required=False, ), 'time_started': forms.DateTimeField(required=False, ),
        'time_ended': forms.DateTimeField(required=False, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("competition_stage", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class CompetitionStageList(View):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = CompetitionStage.objects.filter(competition_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:competition:competition_stage', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            content = request.GET.get("content")
            unit = request.GET.get("unit")
            province = request.GET.get("province")
            city = request.GET.get("city")

            if CompetitionStage == Competition:
                redir = 'admin:competition:competition'
            else:
                redir = 'admin:competition:competition_stage_list'
            context = Context({
                'name': name,
                'content': content,
                'unit': unit,
                'province': province,
                'city': city,
                'list': Competition.objects.filter(
                    name__contains=name,
                    content__contains=content,
                    unit__contains=unit,
                    province__contains=province,
                    city__contains=city), 'redir': redir, 'rb': 'competition_stage', 'user': request.user})
        else:
            context = Context({'rb': 'competition_stage', 'user': request.user})
        return self.success(data=context)


class CompetitionTeamParticipatorView(BaseView):
    @fetch_record(CompetitionTeamParticipator.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(CompetitionTeamParticipator.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("competition_team_participator", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class CompetitionTeamParticipatorList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = CompetitionTeamParticipator.objects.filter(competition_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:competition:competition_team_participator',
                               'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            content = request.GET.get("content")
            unit = request.GET.get("unit")
            province = request.GET.get("province")
            city = request.GET.get("city")

            if CompetitionTeamParticipator == Competition:
                redir = 'admin:competition:competition'
            else:
                redir = 'admin:competition:competition_team_participator_list'
            context = Context({
                'name': name,
                'content': content,
                'unit': unit,
                'province': province,
                'city': city,
                'list': Competition.objects.filter(
                    name__contains=name,
                    content__contains=content,
                    unit__contains=unit,
                    province__contains=province,
                    city__contains=city), 'redir': redir, 'rb': 'competition_team_participator', 'user': request.user})
        else:
            context = Context({'rb': 'competition_team_participator', 'user': request.user})
        return self.success(data=context)
