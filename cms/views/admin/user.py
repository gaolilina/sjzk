# Auto generated by user.py
from django import forms
from django.http import HttpResponse
from django.template import loader, Context
from django.views.generic import View

from admin.utils.decorators import *
from main.models.action import UserAction, UserActionLiker, UserActionComment
from main.models.user import *
from util.decorator.auth import admin_auth
from util.decorator.param import old_validate_args
from util.decorator.permission import admin_permission
from util.base.view import BaseView


class UserView(BaseView):
    @admin_auth
    @admin_permission('userInfo')
    @fetch_record(User.objects, 'mod', 'id')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(User.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'is_enabled': forms.BooleanField(required=False),
        'username': forms.CharField(max_length=20, required=False, ),
        'phone_number': forms.CharField(max_length=11, ),
        'name': forms.CharField(max_length=15, ),
        'description': forms.CharField(max_length=100, required=False, ),
        'icon': forms.CharField(max_length=100, required=False, ),
        'gender': forms.IntegerField(required=False, ),
        'qq': forms.CharField(max_length=20, required=False, ),
        'wechat': forms.CharField(max_length=20, required=False, ),
        'email': forms.CharField(max_length=254, required=False, ),
        'birthday': forms.DateField(required=False, ),
        'province': forms.CharField(max_length=20, required=False, ),
        'city': forms.CharField(max_length=20, required=False, ),
        'county': forms.CharField(max_length=20, required=False, ),
        'is_verified': forms.IntegerField(required=False, ),
        'real_name': forms.CharField(max_length=20, required=False, ),
        'id_number': forms.CharField(max_length=18, required=False, ),
        'id_card': forms.CharField(max_length=100, required=False, ),
        'is_role_verified': forms.IntegerField(required=False),
        'role': forms.CharField(max_length=20, required=False, ),
        'other_number': forms.CharField(max_length=20, required=False, ),
        'other_card': forms.CharField(max_length=100, required=False, ),
        'unit1': forms.CharField(max_length=20, required=False, ),
        'unit2': forms.CharField(max_length=20, required=False, ),
        'profession': forms.CharField(max_length=20, required=False, ),
        'score': forms.IntegerField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = User.objects.filter(user_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")
            is_verified = request.GET.get("is_verified")

            if User == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'is_verified': is_verified,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county,
                    is_verified=is_verified), 'redir': redir, 'rb': 'user', 'user': request.user})
        else:
            context = Context({'rb': 'user', 'user': request.user})
        return self.success(data=context)


class UserActionView(BaseView):
    @admin_auth
    @require_role('yz')
    @fetch_record(UserAction.objects, 'mod', 'id')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserAction.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'action': forms.CharField(max_length=20, ), 'time_created': forms.DateTimeField(required=False, ),
        'object_type': forms.CharField(max_length=20, ), 'object_id': forms.IntegerField(required=False, ),
        'related_object_type': forms.CharField(max_length=20, required=False, ),
        'related_object_id': forms.IntegerField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_action", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserActionList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserAction.objects.filter(user_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_action', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserAction == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_action_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_action', 'user': request.user})
        else:
            context = Context({'rb': 'user_action', 'user': request.user})
        return self.success(data=context)


class UserActionCommentView(BaseView):
    @fetch_record(UserActionComment.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserActionComment.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'content': forms.CharField(max_length=100, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_action_comment", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserActionCommentList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserActionComment.objects.filter(entity_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:user:user_action_comment', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserActionComment == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_action_comment_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_action_comment', 'user': request.user})
        else:
            context = Context({'rb': 'user_action_comment', 'user': request.user})
        return self.success(data=context)


class UserActionLikerView(BaseView):
    @fetch_record(UserActionLiker.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserActionLiker.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_action_liker", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserActionLikerList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserActionLiker.objects.filter(user_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:user:user_action_liker', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserActionLiker == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_action_liker_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_action_liker', 'user': request.user})
        else:
            context = Context({'rb': 'user_action_liker', 'user': request.user})
        return self.success(data=context)


class UserBehaviorView(BaseView):
    @fetch_record(UserBehavior.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserBehavior.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'behavior': forms.CharField(max_length=10, ), 'object_type': forms.CharField(max_length=20, ),
        'object_id': forms.IntegerField(required=False, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_behavior", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserBehaviorList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserBehavior.objects.filter(user_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_behavior', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserBehavior == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_behavior_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_behavior', 'user': request.user})
        else:
            context = Context({'rb': 'user_behavior', 'user': request.user})
        return self.success(data=context)


class UserCommentView(BaseView):
    @fetch_record(UserComment.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserComment.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'content': forms.CharField(max_length=100, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_comment", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserCommentList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserComment.objects.filter(entity_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_comment', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserComment == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_comment_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_comment', 'user': request.user})
        else:
            context = Context({'rb': 'user_comment', 'user': request.user})
        return self.success(data=context)


class UserExperienceView(BaseView):
    @fetch_record(UserExperience.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserExperience.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'type': forms.CharField(max_length=20, ), 'unit': forms.CharField(max_length=20, required=False, ),
        'profession': forms.CharField(max_length=20, required=False, ),
        'degree': forms.CharField(max_length=20, required=False, ),
        'description': forms.CharField(max_length=100, required=False, ), 'time_in': forms.DateField(required=False, ),
        'time_out': forms.DateField(required=False, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_experience", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserExperienceList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserExperience.objects.filter(user_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_experience', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserExperience == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_experience_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_experience', 'user': request.user})
        else:
            context = Context({'rb': 'user_experience', 'user': request.user})
        return self.success(data=context)


class UserFeatureView(BaseView):
    @fetch_record(UserFeature.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserFeature.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'data': forms.CharField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_feature", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserFeatureList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserFeature.objects.filter(user_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_feature', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserFeature == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_feature_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_feature', 'user': request.user})
        else:
            context = Context({'rb': 'user_feature', 'user': request.user})
        return self.success(data=context)


class UserFeedbackView(BaseView):
    @fetch_record(UserFeedback.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserFeedback.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'content': forms.CharField(required=False, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_feedback", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserFeedbackList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserFeedback.objects.filter(user_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_feedback', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserFeedback == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_feedback_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_feedback', 'user': request.user})
        else:
            context = Context({'rb': 'user_feedback', 'user': request.user})
        return self.success(data=context)


class UserFollowerView(BaseView):
    @fetch_record(UserFollower.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserFollower.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_follower", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserFollowerList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserFollower.objects.filter(user_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_follower', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserFollower == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_follower_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_follower', 'user': request.user})
        else:
            context = Context({'rb': 'user_follower', 'user': request.user})
        return self.success(data=context)


class UserFriendView(BaseView):
    @fetch_record(UserFriend.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserFriend.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_friend", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserFriendList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserFriend.objects.filter(user_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_friend', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserFriend == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_friend_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_friend', 'user': request.user})
        else:
            context = Context({'rb': 'user_friend', 'user': request.user})
        return self.success(data=context)


class UserFriendRequestView(BaseView):
    @fetch_record(UserFriendRequest.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserFriendRequest.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'description': forms.CharField(max_length=100, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_friend_request", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserFriendRequestList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserFriendRequest.objects.filter(user_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:user:user_friend_request', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserFriendRequest == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_friend_request_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_friend_request', 'user': request.user})
        else:
            context = Context({'rb': 'user_friend_request', 'user': request.user})
        return self.success(data=context)


class UserLikerView(BaseView):
    @fetch_record(UserLiker.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserLiker.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_liker", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserLikerList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserLiker.objects.filter(user_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_liker', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserLiker == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_liker_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_liker', 'user': request.user})
        else:
            context = Context({'rb': 'user_liker', 'user': request.user})
        return self.success(data=context)


class UserScoreView(BaseView):
    @fetch_record(UserScore.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserScore.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'score': forms.IntegerField(required=False, ), 'description': forms.CharField(max_length=100, required=False, ),
        'type': forms.CharField(max_length=10, required=False, ), 'time_created': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_score_record", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserScoreList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserScore.objects.filter(user_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:user:user_score_record', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserScore == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_score_record_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_score_record', 'user': request.user})
        else:
            context = Context({'rb': 'user_score_record', 'user': request.user})
        return self.success(data=context)


class UserTagView(BaseView):
    @fetch_record(UserTag.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserTag.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'name': forms.CharField(max_length=20, ), 'order': forms.IntegerField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_tag", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserTagList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserTag.objects.filter(entity_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_tag', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserTag == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_tag_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_tag', 'user': request.user})
        else:
            context = Context({'rb': 'user_tag', 'user': request.user})
        return self.success(data=context)


class UserValidationCodeView(BaseView):
    @fetch_record(UserValidationCode.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserValidationCode.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'phone_number': forms.CharField(max_length=11, ), 'code': forms.CharField(max_length=6, ),
        'time_expired': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_validation_code", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserValidationCodeList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserValidationCode.objects.filter(user_id=kwargs["id"])
            context = Context(
                {'page': page, 'list': list, 'redir': 'admin:user:user_validation_code', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserValidationCode == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_validation_code_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_validation_code', 'user': request.user})
        else:
            context = Context({'rb': 'user_validation_code', 'user': request.user})
        return self.success(data=context)


class UserVisitorView(BaseView):
    @fetch_record(UserVisitor.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    def get(self, request, mod):
        context = Context({'mod': mod, 'user': request.user})
        return self.success(data=context)

    @fetch_record(UserVisitor.objects, 'mod', 'id')
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'time_updated': forms.DateTimeField(required=False, ),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_visitor", mod.id, 1, request.user)

        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return self.success(data=context)


class UserVisitorList(BaseView):
    @admin_auth
    @require_role('yz')
    @old_validate_args({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserVisitor.objects.filter(user_id=kwargs["id"])
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_visitor', 'user': request.user})
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            phone = request.GET.get("phone")
            unit1 = request.GET.get("unit1")
            province = request.GET.get("province")
            city = request.GET.get("city")
            county = request.GET.get("county")

            if UserVisitor == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_visitor_list'
            context = Context({
                'name': name,
                'phone': phone,
                'unit1': unit1,
                'province': province,
                'city': city,
                'county': county,
                'list': User.objects.filter(
                    name__contains=name,
                    phone_number__contains=phone,
                    unit1__contains=unit1,
                    province__contains=province,
                    city__contains=city,
                    county__contains=county), 'redir': redir, 'rb': 'user_visitor', 'user': request.user})
        else:
            context = Context({'rb': 'user_visitor', 'user': request.user})
        return self.success(data=context)
