# Auto generated by generate.py
from django import forms
from django.http import HttpResponse
from django.template import loader, Context
from django.views.generic import View

from main.models.team import *

from admin.utils.decorators import *
class ExternalTaskView(View):
    @fetch_record(ExternalTask.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/external_task.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(ExternalTask.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'title': forms.CharField(max_length=20,),'content': forms.CharField(required=False,),'expend': forms.IntegerField(required=False,),'expend_actual': forms.IntegerField(required=False,),'status': forms.IntegerField(required=False,),'deadline': forms.DateField(required=False,),'assign_num': forms.IntegerField(required=False,),'submit_num': forms.IntegerField(required=False,),'pay_num': forms.IntegerField(required=False,),'pay_time': forms.DateTimeField(required=False,),'finish_time': forms.DateTimeField(required=False,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("external_task", mod.id, 1, request.user)

        template = loader.get_template("team/external_task.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class ExternalTaskList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = ExternalTask.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/external_task_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:external_task', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if ExternalTask == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:external_task_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'external_task', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'external_task', 'user': request.user})
            return HttpResponse(template.render(context))
class InternalTaskView(View):
    @fetch_record(InternalTask.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/internal_task.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(InternalTask.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'title': forms.CharField(max_length=20,),'content': forms.CharField(required=False,),'status': forms.IntegerField(required=False,),'deadline': forms.DateField(required=False,),'assign_num': forms.IntegerField(required=False,),'submit_num': forms.IntegerField(required=False,),'finish_time': forms.DateTimeField(required=False,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("internal_task", mod.id, 1, request.user)

        template = loader.get_template("team/internal_task.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class InternalTaskList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = InternalTask.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/internal_task_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:internal_task', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if InternalTask == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:internal_task_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'internal_task', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'internal_task', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamView(View):
    @fetch_record(Team.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(Team.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'name': forms.CharField(max_length=20,),'icon': forms.CharField(max_length=100,required=False,),'description': forms.CharField(max_length=100,required=False,),'url': forms.CharField(max_length=100,),'field1': forms.CharField(max_length=10,required=False,),'field2': forms.CharField(max_length=10,required=False,),'province': forms.CharField(max_length=20,required=False,),'city': forms.CharField(max_length=20,required=False,),'county': forms.CharField(max_length=20,required=False,),'is_recruiting': forms.BooleanField(required=False),'is_enabled': forms.BooleanField(required=False),'score': forms.IntegerField(required=False,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team", mod.id, 1, request.user)

        template = loader.get_template("team/team.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = Team.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if Team == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamAchievementView(View):
    @fetch_record(TeamAchievement.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_achievement.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamAchievement.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'description': forms.CharField(max_length=100,required=False,),'picture': forms.CharField(max_length=100,required=False,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_achievement", mod.id, 1, request.user)

        template = loader.get_template("team/team_achievement.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamAchievementList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamAchievement.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_achievement_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_achievement', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamAchievement == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_achievement_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_achievement', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_achievement', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamActionView(View):
    @fetch_record(TeamAction.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_action.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamAction.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'action': forms.CharField(max_length=20,),'time_created': forms.DateTimeField(required=False,),'object_type': forms.CharField(max_length=20,),'object_id': forms.IntegerField(required=False,),'related_object_type': forms.CharField(max_length=20,required=False,),'related_object_id': forms.IntegerField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_action", mod.id, 1, request.user)

        template = loader.get_template("team/team_action.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamActionList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamAction.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_action_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_action', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamAction == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_action_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_action', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_action', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamCommentView(View):
    @fetch_record(TeamComment.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_comment.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamComment.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'content': forms.CharField(max_length=100,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_comment", mod.id, 1, request.user)

        template = loader.get_template("team/team_comment.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamCommentList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamComment.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_comment_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_comment', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamComment == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_comment_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_comment', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_comment', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamFeatureView(View):
    @fetch_record(TeamFeature.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_feature.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamFeature.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'data': forms.CharField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_feature", mod.id, 1, request.user)

        template = loader.get_template("team/team_feature.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamFeatureList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamFeature.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_feature_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_feature', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamFeature == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_feature_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_feature', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_feature', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamFollowerView(View):
    @fetch_record(TeamFollower.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_follower.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamFollower.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_follower", mod.id, 1, request.user)

        template = loader.get_template("team/team_follower.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamFollowerList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamFollower.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_follower_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_follower', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamFollower == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_follower_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_follower', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_follower', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamInvitationView(View):
    @fetch_record(TeamInvitation.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_invitation.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamInvitation.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'description': forms.CharField(max_length=100,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_invitation", mod.id, 1, request.user)

        template = loader.get_template("team/team_invitation.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamInvitationList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamInvitation.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_invitation_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_invitation', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamInvitation == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_invitation_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_invitation', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_invitation', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamLikerView(View):
    @fetch_record(TeamLiker.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_liker.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamLiker.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_liker", mod.id, 1, request.user)

        template = loader.get_template("team/team_liker.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamLikerList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamLiker.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_liker_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_liker', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamLiker == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_liker_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_liker', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_liker', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamMemberView(View):
    @fetch_record(TeamMember.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_member.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamMember.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_member", mod.id, 1, request.user)

        template = loader.get_template("team/team_member.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamMemberList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamMember.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_member_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_member', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamMember == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_member_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_member', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_member', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamMemberRequestView(View):
    @fetch_record(TeamMemberRequest.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_member_request.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamMemberRequest.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'description': forms.CharField(required=False,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_member_request", mod.id, 1, request.user)

        template = loader.get_template("team/team_member_request.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamMemberRequestList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamMemberRequest.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_member_request_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_member_request', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamMemberRequest == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_member_request_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_member_request', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_member_request', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamNeedView(View):
    @fetch_record(TeamNeed.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_need.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamNeed.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'type': forms.IntegerField(required=False,),'title': forms.CharField(required=False,),'description': forms.CharField(max_length=200,required=False,),'status': forms.IntegerField(required=False,),'number': forms.IntegerField(required=False,),'field': forms.CharField(max_length=20,required=False,),'skill': forms.CharField(max_length=20,required=False,),'deadline': forms.DateField(required=False,),'age_min': forms.IntegerField(required=False,),'age_max': forms.IntegerField(required=False,),'gender': forms.CharField(max_length=1,required=False,),'degree': forms.CharField(max_length=20,required=False,),'major': forms.CharField(max_length=20,required=False,),'time_graduated': forms.DateField(required=False,),'cost': forms.IntegerField(required=False,),'cost_unit': forms.CharField(max_length=1,required=False,),'time_started': forms.DateField(required=False,),'time_ended': forms.DateField(required=False,),'members': forms.CharField(max_length=100,required=False,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_need", mod.id, 1, request.user)

        template = loader.get_template("team/team_need.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamNeedList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamNeed.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_need_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_need', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamNeed == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_need_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_need', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_need', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamScoreView(View):
    @fetch_record(TeamScore.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_score_record.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamScore.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'score': forms.IntegerField(required=False,),'description': forms.CharField(max_length=100,required=False,),'type': forms.CharField(max_length=10,required=False,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_score_record", mod.id, 1, request.user)

        template = loader.get_template("team/team_score_record.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamScoreList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamScore.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_score_record_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_score_record', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamScore == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_score_record_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_score_record', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_score_record', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamTagView(View):
    @fetch_record(TeamTag.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_tag.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamTag.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'name': forms.CharField(max_length=20,),'order': forms.IntegerField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_tag", mod.id, 1, request.user)

        template = loader.get_template("team/team_tag.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamTagList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamTag.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_tag_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_tag', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamTag == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_tag_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_tag', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_tag', 'user': request.user})
            return HttpResponse(template.render(context))
class TeamVisitorView(View):
    @fetch_record(TeamVisitor.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("team/team_visitor.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(TeamVisitor.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'time_updated': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("team_visitor", mod.id, 1, request.user)

        template = loader.get_template("team/team_visitor.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class TeamVisitorList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = TeamVisitor.objects.filter(team_id=kwargs["id"])
            template = loader.get_template("team/team_visitor_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:team:team_visitor', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("name") is not None:
            name = request.GET.get("name")
            template = loader.get_template("team/index.html")
            if TeamVisitor == Team:
                redir = 'admin:team:team'
            else:
                redir = 'admin:team:team_visitor_list'
            context = Context({'name': name, 'list': Team.objects.filter(name=name), 'redir': redir, 'rb': 'team_visitor', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("team/index.html")
            context = Context({'rb': 'team_visitor', 'user': request.user})
            return HttpResponse(template.render(context))
