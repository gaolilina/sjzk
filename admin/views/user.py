# Auto generated by generate.py
from django import forms
from django.http import HttpResponse
from django.template import loader, Context
from django.views.generic import View

from main.models.user import *

from admin.utils.decorators import *
class UserView(View):
    @fetch_record(User.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(User.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'is_enabled': forms.BooleanField(required=False),'username': forms.CharField(max_length=20,required=False,),'phone_number': forms.CharField(max_length=11,),'token': forms.CharField(max_length=256,),'time_created': forms.DateTimeField(required=False,),'name': forms.CharField(max_length=15,),'description': forms.CharField(max_length=100,required=False,),'icon': forms.CharField(max_length=100,required=False,),'gender': forms.CharField(max_length=1,required=False,),'qq': forms.CharField(max_length=20,required=False,),'wechat': forms.CharField(max_length=20,required=False,),'email': forms.CharField(max_length=254,required=False,),'birthday': forms.DateField(required=False,),'province': forms.CharField(max_length=20,required=False,),'city': forms.CharField(max_length=20,required=False,),'county': forms.CharField(max_length=20,required=False,),'is_verified': forms.IntegerField(required=False,),'real_name': forms.CharField(max_length=20,required=False,),'id_number': forms.CharField(max_length=18,required=False,),'id_card': forms.CharField(max_length=100,required=False,),'is_role_verified': forms.BooleanField(required=False),'role': forms.CharField(max_length=20,required=False,),'other_number': forms.CharField(max_length=20,required=False,),'other_card': forms.CharField(max_length=100,required=False,),'unit1': forms.CharField(max_length=20,required=False,),'unit2': forms.CharField(max_length=20,required=False,),'profession': forms.CharField(max_length=20,required=False,),'score': forms.IntegerField(required=False,),'invitation_code': forms.CharField(max_length=8,),'used_invitation_code': forms.CharField(max_length=8,required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user", mod.id, 1, request.user)

        template = loader.get_template("user/user.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = User.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if User == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user', 'user': request.user})
            return HttpResponse(template.render(context))
class UserActionView(View):
    @fetch_record(UserAction.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_action.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserAction.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'action': forms.CharField(max_length=20,),'time_created': forms.DateTimeField(required=False,),'object_type': forms.CharField(max_length=20,),'object_id': forms.IntegerField(required=False,),'related_object_type': forms.CharField(max_length=20,required=False,),'related_object_id': forms.IntegerField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_action", mod.id, 1, request.user)

        template = loader.get_template("user/user_action.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserActionList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserAction.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_action_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_action', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserAction == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_action_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_action', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_action', 'user': request.user})
            return HttpResponse(template.render(context))
class UserActionLikerView(View):
    @fetch_record(UserActionLiker.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_action_liker.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserActionLiker.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_action_liker", mod.id, 1, request.user)

        template = loader.get_template("user/user_action_liker.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserActionLikerList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserActionLiker.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_action_liker_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_action_liker', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserActionLiker == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_action_liker_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_action_liker', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_action_liker', 'user': request.user})
            return HttpResponse(template.render(context))
class UserBehaviorView(View):
    @fetch_record(UserBehavior.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_behavior.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserBehavior.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'behavior': forms.CharField(max_length=10,),'object_type': forms.CharField(max_length=20,),'object_id': forms.IntegerField(required=False,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_behavior", mod.id, 1, request.user)

        template = loader.get_template("user/user_behavior.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserBehaviorList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserBehavior.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_behavior_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_behavior', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserBehavior == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_behavior_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_behavior', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_behavior', 'user': request.user})
            return HttpResponse(template.render(context))
class UserCommentView(View):
    @fetch_record(UserComment.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_comment.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserComment.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'content': forms.CharField(max_length=100,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_comment", mod.id, 1, request.user)

        template = loader.get_template("user/user_comment.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserCommentList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserComment.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_comment_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_comment', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserComment == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_comment_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_comment', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_comment', 'user': request.user})
            return HttpResponse(template.render(context))
class UserExperienceView(View):
    @fetch_record(UserExperience.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_experience.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserExperience.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'type': forms.CharField(max_length=20,),'unit': forms.CharField(max_length=20,required=False,),'profession': forms.CharField(max_length=20,required=False,),'degree': forms.CharField(max_length=20,required=False,),'description': forms.CharField(max_length=100,required=False,),'time_in': forms.DateField(required=False,),'time_out': forms.DateField(required=False,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_experience", mod.id, 1, request.user)

        template = loader.get_template("user/user_experience.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserExperienceList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserExperience.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_experience_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_experience', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserExperience == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_experience_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_experience', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_experience', 'user': request.user})
            return HttpResponse(template.render(context))
class UserFeatureView(View):
    @fetch_record(UserFeature.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_feature.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserFeature.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'data': forms.CharField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_feature", mod.id, 1, request.user)

        template = loader.get_template("user/user_feature.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserFeatureList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserFeature.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_feature_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_feature', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserFeature == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_feature_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_feature', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_feature', 'user': request.user})
            return HttpResponse(template.render(context))
class UserFeedbackView(View):
    @fetch_record(UserFeedback.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_feedback.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserFeedback.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'content': forms.CharField(required=False,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_feedback", mod.id, 1, request.user)

        template = loader.get_template("user/user_feedback.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserFeedbackList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserFeedback.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_feedback_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_feedback', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserFeedback == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_feedback_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_feedback', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_feedback', 'user': request.user})
            return HttpResponse(template.render(context))
class UserFollowerView(View):
    @fetch_record(UserFollower.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_follower.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserFollower.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_follower", mod.id, 1, request.user)

        template = loader.get_template("user/user_follower.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserFollowerList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserFollower.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_follower_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_follower', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserFollower == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_follower_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_follower', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_follower', 'user': request.user})
            return HttpResponse(template.render(context))
class UserFriendView(View):
    @fetch_record(UserFriend.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_friend.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserFriend.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_friend", mod.id, 1, request.user)

        template = loader.get_template("user/user_friend.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserFriendList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserFriend.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_friend_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_friend', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserFriend == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_friend_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_friend', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_friend', 'user': request.user})
            return HttpResponse(template.render(context))
class UserFriendRequestView(View):
    @fetch_record(UserFriendRequest.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_friend_request.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserFriendRequest.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'description': forms.CharField(max_length=100,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_friend_request", mod.id, 1, request.user)

        template = loader.get_template("user/user_friend_request.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserFriendRequestList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserFriendRequest.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_friend_request_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_friend_request', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserFriendRequest == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_friend_request_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_friend_request', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_friend_request', 'user': request.user})
            return HttpResponse(template.render(context))
class UserLikerView(View):
    @fetch_record(UserLiker.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_liker.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserLiker.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_liker", mod.id, 1, request.user)

        template = loader.get_template("user/user_liker.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserLikerList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserLiker.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_liker_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_liker', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserLiker == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_liker_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_liker', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_liker', 'user': request.user})
            return HttpResponse(template.render(context))
class UserScoreView(View):
    @fetch_record(UserScore.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_score_record.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserScore.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'score': forms.IntegerField(required=False,),'description': forms.CharField(max_length=100,required=False,),'type': forms.CharField(max_length=10,required=False,),'time_created': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_score_record", mod.id, 1, request.user)

        template = loader.get_template("user/user_score_record.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserScoreList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserScore.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_score_record_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_score_record', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserScore == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_score_record_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_score_record', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_score_record', 'user': request.user})
            return HttpResponse(template.render(context))
class UserTagView(View):
    @fetch_record(UserTag.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_tag.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserTag.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'name': forms.CharField(max_length=20,),'order': forms.IntegerField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_tag", mod.id, 1, request.user)

        template = loader.get_template("user/user_tag.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserTagList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserTag.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_tag_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_tag', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserTag == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_tag_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_tag', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_tag', 'user': request.user})
            return HttpResponse(template.render(context))
class UserValidationCodeView(View):
    @fetch_record(UserValidationCode.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_validation_code.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserValidationCode.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'phone_number': forms.CharField(max_length=11,),'code': forms.CharField(max_length=6,),'time_expired': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_validation_code", mod.id, 1, request.user)

        template = loader.get_template("user/user_validation_code.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserValidationCodeList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserValidationCode.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_validation_code_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_validation_code', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserValidationCode == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_validation_code_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_validation_code', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_validation_code', 'user': request.user})
            return HttpResponse(template.render(context))
class UserVisitorView(View):
    @fetch_record(UserVisitor.objects, 'mod', 'id')
    @require_cookie
    def get(self, request, mod):
        template = loader.get_template("user/user_visitor.html")
        context = Context({'mod': mod, 'user': request.user})
        return HttpResponse(template.render(context))

    @fetch_record(UserVisitor.objects, 'mod', 'id')
    @require_cookie
    @validate_args2({
        'time_updated': forms.DateTimeField(required=False,),
    })
    def post(self, request, mod, **kwargs):
        for k in kwargs:
            setattr(mod, k, kwargs[k])
        mod.save()

        admin_log("user_visitor", mod.id, 1, request.user)

        template = loader.get_template("user/user_visitor.html")
        context = Context({'mod': mod, 'msg': '保存成功', 'user': request.user})
        return HttpResponse(template.render(context))

class UserVisitorList(View):
    @require_cookie
    @validate_args2({
        'page': forms.IntegerField(required=False, min_value=0),
    })
    def get(self, request, page=0, **kwargs):
        if kwargs["id"] is not None:
            list = UserVisitor.objects.filter(user_id=kwargs["id"])
            template = loader.get_template("user/user_visitor_list.html")
            context = Context({'page': page, 'list': list, 'redir': 'admin:user:user_visitor', 'user': request.user})
            return HttpResponse(template.render(context))
        elif request.GET.get("username") is not None:
            username = request.GET.get("username")
            template = loader.get_template("user/index.html")
            if UserVisitor == User:
                redir = 'admin:user:user'
            else:
                redir = 'admin:user:user_visitor_list'
            context = Context({'username': username, 'list': User.objects.filter(username=username), 'redir': redir, 'rb': 'user_visitor', 'user': request.user})
            return HttpResponse(template.render(context))
        else:
            template = loader.get_template("user/index.html")
            context = Context({'rb': 'user_visitor', 'user': request.user})
            return HttpResponse(template.render(context))
